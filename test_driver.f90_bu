PROGRAM driver
        !USE poly_zeros
        USE dslmpep_subroutines
        IMPLICIT NONE
        
        !=======VARIABLES=======
        !Common
        CHARACTER(*), PARAMETER :: resultsDir="/home/nsteckley/Documents/Personal/Cameron/LMPEP/DYLMPEP/results"
        INTEGER, DIMENSION(4) :: iseed
       	REAL (KIND=dp), DIMENSION(:), ALLOCATABLE  ::  testProblem
       	INTEGER :: clock_d ,clock_rate_d ,clock_start_d ,clock_stop_d, clock_p ,clock_rate_p ,clock_start_p ,clock_stop_p  
        INTEGER :: maxDegree, degree
        
        !DSLMPEP ----------
        INTEGER :: i
        INTEGER, DIMENSION(:), ALLOCATABLE :: iterations_d
	REAL(dp), DIMENSION(:), ALLOCATABLE :: backwardError, realRoots, imaginaryRoots
        !------------------
	
	!PZEROS -----------
	INTEGER           :: nitmax, iterations_p
	REAL (KIND=dp), DIMENSION(:), ALLOCATABLE     ::  radius
	COMPLEX (KIND=dp), DIMENSION(:), ALLOCATABLE  ::  root
	LOGICAL, DIMENSION(:), ALLOCATABLE            ::  err	
        !------------------
        	
	!Create iseed
	CALL SYSTEM_CLOCK(COUNT=clock_d)
	CALL srand(clock_d)
	DO i=1,4
	  iseed(i)=MOD(irand(),4095)
	ENDDO
	IF(MOD(iseed(4),2)==0) THEN
	  iseed(4)=iseed(4)+1
	ENDIF
       
	!Read maxDegree from user       
        PRINT*, 'Input highest degree to which you would like to test'
        READ *, maxDegree
        
	OPEN(UNIT=1,FILE=resultsDir//"output.txt")

        DO degree = 1, maxDegree
        
		!Generate random problem of degree i
		ALLOCATE(testProblem(degree+1))
	  	CALL dlarnv(2,iseed,degree+1,testProblem)
		
		!=======SOLVE=======
		!DSLMPEP ----------
		ALLOCATE(backwardError(degree),realRoots(degree),imaginaryRoots(degree),iterations_d(degree))
		!TODO DBLE(clock_stop-clock_start)/DBLE(clock_rate) MOVE TO ARRAY
		CALL SYSTEM_CLOCK(count_rate=clock_rate_d)
		CALL SYSTEM_CLOCK(count=clock_start_d)
		CALL dslm(testProblem, realRoots, imaginaryRoots, backwardError, iterations_d, degree)
		CALL SYSTEM_CLOCK(count=clock_stop_d)
		!------------------
		
		!PZEROS -----------
		!ALLOCATE(radius(1:degree),root(1:degree),testProblem(0:degree),err(degree+1))
		!CALL system_clock(count_rate=clock_rate_p)
		!CALL system_clock(count=clock_start_p)
		!CALL polzeros (degree, DCMPLX(testProblem), eps, big, small, nitmax, root, radius, err, iter)
		!CALL system_clock(count=clock_stop_p)
		!------------------
		
		DEALLOCATE(testProblem)
		!=======SAVE RESULTS=======

		!DSLMPEP ----------
		!WRITE(*,'(20G15.4)') 'DSLMPEP TIME =', DBLE(clock_stop-clock_start)/DBLE(clock_rate)
		!WRITE(*,'(20G15.4)') 'AVG. ITER    =', DBLE(SUM(iter))/(d)
		!WRITE(*,'(20G15.4)') 'MAX BE       =', MAXVAL(be)
		!OPEN(UNIT=1,FILE=fileplace2//"ROOTS-BERR")
		!DO i=1,d
		!  WRITE(1,*) er(i), ei(i), be(i)
		!ENDDO
		! CLOSE(UNIT=1)
		!------------------
	
		!PZEROS -----------
		!WRITE(*,'(20G12.4)') 'PZEROS TIME =', dble(clock_stop-clock_start)/dble(clock_rate)
		!CALL sort(n, root, radius, err)
		!WRITE(*,*)' ITERATIONS =', iter
		!WRITE(*,*)' MAX RADIUS =', maxval(radius)
		!------------------
		DEALLOCATE(backwardError,realRoots,imaginaryRoots,iterations_d)
		!DEALLOCATE(radius,root,testProblem,err)
		        
        END DO
        CLOSE(UNIT=1)
END PROGRAM driver
